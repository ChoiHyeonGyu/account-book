<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="board">
	<select id="usernameselect" parameterType="string" resultType="string">
		<![CDATA[
			select name from users where id = #{value}
		]]>
	</select>
	
	<select id="findidselect" parameterType="string" resultType="string">
		<![CDATA[
			select id from board where board_id = #{value}
		]]>
	</select>

	<insert id="boardinsert" parameterType="boardvo">
		<![CDATA[
			insert into board values(seq_board.nextval, #{id}, #{month}, #{title}, #{content}, #{name}, sysdate, 0, 0, #{defaultcheck})
		]]>
	</insert>

	<select id="boardidselect" parameterType="boardvo" resultType="int">
		<![CDATA[
			select board_id from board where id = #{id} and month = #{month} and title = #{title} 
		]]>
		<if test="content != null and content != ''">
			<![CDATA[
				and content = #{content}
			]]>
		</if>
	</select>

	<insert id="imageinsert" parameterType="boardvo">
		<![CDATA[
			insert into picture values(#{photo}, #{boardId})
		]]>
	</insert>

	<select id="contentselect" parameterType="int" resultType="boardvo">
		<![CDATA[
			select board.board_id as boardId, board.*, picture.photo, board.default_check as defaultcheck from board, picture where board.board_id = picture.board_id and board.board_id = #{value}
		]]>
	</select>

	<update id="boardupdate" parameterType="boardvo">
		<![CDATA[
			update board set month = #{month}, title = #{title}, content = #{content} where board_id = #{boardId}
		]]>
	</update>

	<select id="imageselect" parameterType="int" resultType="boardvo">
		<![CDATA[
			select photo from picture where board_id = #{value}
		]]>
	</select>

	<delete id="imagedelete" parameterType="int">
		<![CDATA[
			delete from picture where board_id = #{value}
		]]>
	</delete>

	<delete id="boarddelete" parameterType="int">
		<![CDATA[
			delete from board where board_id = #{value}
		]]>
	</delete>

	<select id="boardcount" parameterType="string" resultType="int">
		<![CDATA[
			select count(*) from board
		]]>
		<if test="_parameter != null and _parameter != ''">
			<![CDATA[
				where month like '%${_parameter}%' or title like '%${_parameter}%' or name like '%${_parameter}%'
			]]>
		</if>
	</select>

	<select id="getList" parameterType="map" resultType="boardvo">
    	<![CDATA[
			select * from (select a.*, rownum as rn from (select board_id as boardId, board.* from board 
		]]>
		<if test="keyword != null and keyword != ''">
			<![CDATA[					  
				where (month like '%${keyword}%' or title like '%${keyword}%' or name like '%${keyword}%') 
			]]>
		</if>
		<if test="keyword != null and keyword != '' and id != null and id != ''">
			<![CDATA[					  
				and id = #{id} 
			]]>
		</if>
		<if test="(keyword == null or keyword == '') and id != null and id != ''">
			<![CDATA[					  
				where id = #{id} 
			]]>
		</if>
		<![CDATA[					  
			order by board.day desc) a) where (#{page}-1)*#{size}+1 <= rn and rn <= #{page}*#{size}
		]]>
	</select>
	
	<select id="commentsselect" parameterType="int" resultType="boardvo">
		<![CDATA[
			select comments.comment_id as commentId, comments.* from boardcomments, comments where boardcomments.comment_id = comments.comment_id and boardcomments.board_id = #{value}
		]]>
	</select>
	
	<insert id="commentinsert" parameterType="boardvo">
		<![CDATA[
			insert into comments values(seq_comments.nextval, #{id}, #{name}, sysdate, #{content}, '')
		]]>
	</insert>
	
	<select id="commentidselect" parameterType="boardvo" resultType="int">
		<![CDATA[
			select comment_id from comments where id = #{id} and content = #{content}
		]]>
	</select>
	
	<insert id="boardcommentsinsert" parameterType="boardvo">
		<![CDATA[
			insert into boardcomments values(#{boardId}, #{commentId})
		]]>
	</insert>
	
	<select id="replysselect" parameterType="int" resultType="boardvo">
		<![CDATA[
			select comments.comment_id as commentId, comments.* from comments where reply = #{value}
		]]>
	</select>
	
	<insert id="replyinsert" parameterType="boardvo">
		<![CDATA[
			insert into comments values(seq_comments.nextval, #{id}, #{name}, sysdate, #{content}, #{commentId})
		]]>
	</insert>
	
	<delete id="boardcommentsdelete" parameterType="int">
		<![CDATA[
			delete from boardcomments where comment_id = #{value}
		]]>
	</delete>
	
	<delete id="commentdelete" parameterType="int">
		<![CDATA[
			delete from comments where comment_id = #{value} or reply = #{value}
		]]>
	</delete>
	
	<update id="hit" parameterType="int">
		update board set hit = hit + 1 where board_id = #{value}
	</update>
	
	<select id="gdselect" parameterType="boardvo" resultType="int">
		<![CDATA[
			select count(*) from GD where board_id = #{boardId} and id = #{id}
		]]>
	</select>
	
	<insert id="gdinsert" parameterType="boardvo">
		<![CDATA[
			insert into GD values(#{boardId}, #{id})
		]]>
	</insert>
	
	<delete id="gddelete" parameterType="int">
		<![CDATA[
			delete from GD where board_id = #{value}
		]]>
	</delete>
	
	<update id="good" parameterType="int">
		<![CDATA[
			update board set good = good + 1 where board_id = #{value}
		]]>
	</update>
	
	<!-- <select id="graphavgdefaultselect" parameterType="string" resultType="graphvo">
		<![CDATA[
			select sum(cnt) as cnt, category from (select count(*) as cnt, c.category as category from (select id from (select gender, age from users where id = #{value}) a, 
			users where users.gender = a.gender and users.age = a.age) b, list, category c where b.id = list.id and list.operations = '-' and list.category = c.category and c.slave_id = 0 
			and list.day between trunc(sysdate, 'yy') and trunc(add_months(sysdate, 12), 'yy')-1/86400 group by c.category union all
			select count(*) as cnt, c2.category as category from (select id from (select gender, age from users where id = #{value}) a, 
			users where users.gender = a.gender and users.age = a.age) b, list, category c1, category c2 where b.id = list.id and list.operations = '-' and list.category = c1.category 
			and c1.slave_id = c2.category_id and list.day between trunc(sysdate, 'yy') and trunc(add_months(sysdate, 12), 'yy')-1/86400 group by c2.category) 
			group by category order by cnt desc
		]]>
	</select> -->
	
	<select id="limitgraphselect" parameterType="string" resultType="graphvo">
		<![CDATA[
			select distinct * from (select category, money_limit as ml from category c, userscategory uc where c.category_id = uc.category_id and id = #{value}) a,
			(select category, sum(money) as lsum from list where id = #{value} and day between trunc(sysdate, 'mm') and trunc(add_months(sysdate, 1), 'mm') -1/86400 and operations = '-'
			group by category) b where a.category = b.category order by a.category
		]]>
	</select>
	
	<select id="movelimitgraphselect" parameterType="map" resultType="graphvo">
		<![CDATA[
			select distinct * from (select category, money_limit as ml from category c, userscategory uc where c.category_id = uc.category_id and id = #{id}) a,
			(select category, sum(money) as lsum from list where id = #{id} and day between trunc(add_months(sysdate, #{operation}), 'mm') and 
			trunc(add_months(sysdate, #{operation}+1), 'mm') -1/86400 and operations = '-' group by category) b where a.category = b.category order by a.category
		]]>
	</select>
	
	<!-- String에서 숫자만 뽑아내기 translate(money, '0123456789' || money, '0123456789') -->
	
	<select id="importgraphselect" parameterType="string" resultType="graphvo">
		<![CDATA[
			select sum(money) as lsum, category, day as day1 from list where id = #{value} and operations = '+'
			and day between trunc(add_months(sysdate, -12), 'mm') and trunc(sysdate, 'dd') group by category, day order by day
		]]>
	</select>
	
	<select id="exportgraphselect" parameterType="string" resultType="graphvo">
		<![CDATA[
			select sum(money) as lsum, category, day as day1 from list where id = #{value} and operations = '-'
			and day between trunc(add_months(sysdate, -12), 'mm') and trunc(sysdate, 'dd') group by category, day order by day
		]]>
	</select>
	
	<select id="imreporttableselect" parameterType="map" resultType="graphvo">
		<![CDATA[
			select rt.category, 
		]]>
		<foreach collection="intarray" item="item">
			<![CDATA[
				to_char(sum(nvl(case when day between trunc(add_months(sysdate, #{item}), 'mm') and trunc(add_months(sysdate, #{item}+1), 'mm') -1/86400 then sum(money) end, 0)), '999,999,999,999,999') as montharray, 
			]]>
			<if test="item == 0">
				<![CDATA[
					to_char(sum(nvl(case when day between trunc(add_months(sysdate, -11), 'mm') and trunc(add_months(sysdate, 1), 'mm') -1/86400 then sum(money) end, 0) ), '999,999,999,999,999') as sumresult from 
				]]>
			</if>
		</foreach>
		<![CDATA[
			(select category, 
		]]>
		<foreach collection="intarray" item="item">
			<![CDATA[
				nvl(case when day between trunc(add_months(sysdate, #{item}), 'mm') and trunc(add_months(sysdate, #{item}+1), 'mm') -1/86400 then sum(money) end, 0) as a, 
			]]>
			<if test="item == 0">
				<![CDATA[
					nvl(case when day between trunc(add_months(sysdate, -11), 'mm') and trunc(add_months(sysdate, 1), 'mm') -1/86400 then sum(money) end, 0) as b 
				]]>
			</if>
		</foreach>
		<![CDATA[
			from list where id = #{id} and operations = '+' group by category, day) rt group by rt.category
		]]>
	
		<!-- <![CDATA[
			select rt.category, 
		]]>
		<foreach collection="intarray" item="item">
			<![CDATA[
				to_char(sum(nvl(case when day between trunc(add_months(sysdate, #{item}), 'mm') and trunc(add_months(sysdate, #{item}+1), 'mm') -1/86400 then sum(money) end, 0)), '999,999,999,999,999') as montharray, 
			]]>
			<if test="item == 0">
				<![CDATA[
					to_char(sum(nvl(case when day between trunc(add_months(sysdate, -11), 'mm') and trunc(add_months(sysdate, 1), 'mm') -1/86400 then sum(money) end, 0) ), '999,999,999,999,999') as sumresult from 
				]]>
			</if>
		</foreach>
		<![CDATA[
			(select category, 
		]]>
		<foreach collection="intarray" item="item">
			<![CDATA[
				nvl(case when day between trunc(add_months(sysdate, #{item}), 'mm') and trunc(add_months(sysdate, #{item}+1), 'mm') -1/86400 then sum(money) end, 0) as a, 
			]]>
			<if test="item == 0">
				<![CDATA[
					nvl(case when day between trunc(add_months(sysdate, -11), 'mm') and trunc(add_months(sysdate, 1), 'mm') -1/86400 then sum(money) end, 0) as b 
				]]>
			</if>
		</foreach>
		<![CDATA[
			from list where id = #{id} and operations = '+' group by category, day) rt group by rt.category
		]]> -->
	
		<!-- <![CDATA[
			select rt.category, 
		]]>
		<foreach collection="intarray" item="item" open="(" close=")" separator=",">
			<![CDATA[
				to_char(sum(#{item}+'a'), '999,999,999,999,999') as montharray, 
			]]>
		</foreach>
		<![CDATA[
			to_char(sum(b), '999,999,999,999,999') as sumresult from 
		]]>
		<foreach collection="intarray" item="item" open="(" close=")" separator=",">
			<![CDATA[
				(select category, nvl(case when day between trunc(add_months(sysdate, #{item}), 'mm') and trunc(add_months(sysdate, #{item}+1), 'mm') -1/86400 then sum(money) end, 0) as a, 
			]]>
			<if test="item == 0">
				<![CDATA[
					sum(#{item}+'a') as b 
				]]>
			</if>
		</foreach>
		<![CDATA[
			from list where id = #{id} and operations = '+' group by category, day) rt group by rt.category 
		]]> -->
	</select>
	
	<select id="imreporttablesumselect" parameterType="map" resultType="graphvo">
		<![CDATA[
			select  
		]]>
		<foreach collection="intarray" item="int" open="[" close="]" separator=",">
			<![CDATA[
				to_char(sum(#{int}) as sumone, '999,999,999,999,999') as montharray, 
			]]>
		</foreach>
		<![CDATA[
			to_char(sum(sumone), '999,999,999,999,999') as sumresult from 
		]]>
		<foreach collection="intarray" item="int" open="[" close="]" separator=",">
			<![CDATA[
				(select category, nvl(case when day between trunc(add_months(sysdate, #{int}), 'mm') and trunc(add_months(sysdate, #{int}+1), 'mm') -1/86400 then sum(money) end, 0) as #{int}, 
			]]>
		</foreach>
		<![CDATA[
			from list where id = #{id} and operations = '+' group by category, day) rt 
		]]>
	</select>
	
	<select id="exreporttableselect" parameterType="map" resultType="graphvo">
		<![CDATA[
			select rt.category, 
		]]>
		<foreach collection="intarray" item="int" open="[" close="]" separator=",">
			<![CDATA[
				to_char(sum(#{int}) as sumone, '999,999,999,999,999') as montharray, 
			]]>
		</foreach>
		<![CDATA[
			to_char(sum(sumone), '999,999,999,999,999') as sumresult from 
		]]>
		<foreach collection="intarray" item="int" open="[" close="]" separator=",">
			<![CDATA[
				(select category, nvl(case when day between trunc(add_months(sysdate, #{int}), 'mm') and trunc(add_months(sysdate, #{int}+1), 'mm') -1/86400 then sum(money) end, 0) as #{int}, 
			]]>
		</foreach>
		<![CDATA[
			from list where id = #{id} and operations = '-' group by category, day) rt group by rt.category
		]]>
	</select>
	
	<select id="exreporttablesumselect" parameterType="map" resultType="graphvo">
		<![CDATA[
			select  
		]]>
		<foreach collection="intarray" item="int" open="[" close="]" separator=",">
			<![CDATA[
				to_char(sum(#{int}) as sumone, '999,999,999,999,999') as montharray, 
			]]>
		</foreach>
		<![CDATA[
			to_char(sum(sumone), '999,999,999,999,999') as sumresult from 
		]]>
		<foreach collection="intarray" item="int" open="[" close="]" separator=",">
			<![CDATA[
				(select category, nvl(case when day between trunc(add_months(sysdate, #{int}), 'mm') and trunc(add_months(sysdate, #{int}+1), 'mm') -1/86400 then sum(money) end, 0) as #{int}, 
			]]>
		</foreach>
		<![CDATA[
			from list where id = #{id} and operations = '-' group by category, day) rt 
		]]>
	</select>
	
	<select id="dateselect" parameterType="int" resultType="graphvo">
		<![CDATA[
			select to_char(trunc(add_months(sysdate, #{i}), 'mm'), 'YYYY/mm') as month from dual
		]]>
	</select>
	
	<select id="datedetailselect" parameterType="map" resultType="graphdatevo">
		<foreach collection="array1" item="item">
			<if test="month.substring(5).equals(item)">
				<![CDATA[
					select 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1, 'mm/dd') as d31, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2, 'mm/dd') as d30, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3, 'mm/dd') as d29, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4, 'mm/dd') as d28, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5, 'mm/dd') as d27, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6, 'mm/dd') as d26, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7, 'mm/dd') as d25, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8, 'mm/dd') as d24, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9, 'mm/dd') as d23, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10, 'mm/dd') as d22, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11, 'mm/dd') as d21, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12, 'mm/dd') as d20, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13, 'mm/dd') as d19, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14, 'mm/dd') as d18, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15, 'mm/dd') as d17, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16, 'mm/dd') as d16, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17, 'mm/dd') as d15, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18, 'mm/dd') as d14, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19, 'mm/dd') as d13, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20, 'mm/dd') as d12, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21, 'mm/dd') as d11, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22, 'mm/dd') as d10, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23, 'mm/dd') as d9, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24, 'mm/dd') as d8, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25, 'mm/dd') as d7, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26, 'mm/dd') as d6, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27, 'mm/dd') as d5, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28, 'mm/dd') as d4, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29, 'mm/dd') as d3, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -30, 'mm/dd') as d2, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -31, 'mm/dd') as d1 
					from dual
				]]>
			</if>
		</foreach>
		<if test="month.substring(5).equals('02')">
			<![CDATA[
				select  
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1, 'mm/dd') as d28, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2, 'mm/dd') as d27, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3, 'mm/dd') as d26, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4, 'mm/dd') as d25, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5, 'mm/dd') as d24, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6, 'mm/dd') as d23, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7, 'mm/dd') as d22, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8, 'mm/dd') as d21, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9, 'mm/dd') as d20, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10, 'mm/dd') as d19, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11, 'mm/dd') as d18, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12, 'mm/dd') as d17, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13, 'mm/dd') as d16, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14, 'mm/dd') as d15, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15, 'mm/dd') as d14, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16, 'mm/dd') as d13, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17, 'mm/dd') as d12, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18, 'mm/dd') as d11, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19, 'mm/dd') as d10, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20, 'mm/dd') as d9, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21, 'mm/dd') as d8, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22, 'mm/dd') as d7, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23, 'mm/dd') as d6, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24, 'mm/dd') as d5, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25, 'mm/dd') as d4, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26, 'mm/dd') as d3, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27, 'mm/dd') as d2, 
					to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28, 'mm/dd') as d1 
				from dual
			]]>
		</if>
		<foreach collection="array2" item="item">
			<if test="month.substring(5).equals(item)">
				<![CDATA[
					select 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1, 'mm/dd') as d30, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2, 'mm/dd') as d29, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3, 'mm/dd') as d28, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4, 'mm/dd') as d27, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5, 'mm/dd') as d26, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6, 'mm/dd') as d25, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7, 'mm/dd') as d24, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8, 'mm/dd') as d23, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9, 'mm/dd') as d22, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10, 'mm/dd') as d21, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11, 'mm/dd') as d20, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12, 'mm/dd') as d19, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13, 'mm/dd') as d18, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14, 'mm/dd') as d17, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15, 'mm/dd') as d16, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16, 'mm/dd') as d15, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17, 'mm/dd') as d14, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18, 'mm/dd') as d13, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19, 'mm/dd') as d12, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20, 'mm/dd') as d11, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21, 'mm/dd') as d10, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22, 'mm/dd') as d9, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23, 'mm/dd') as d8, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24, 'mm/dd') as d7, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25, 'mm/dd') as d6, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26, 'mm/dd') as d5, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27, 'mm/dd') as d4, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28, 'mm/dd') as d3, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29, 'mm/dd') as d2, 
						to_char(add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -30, 'mm/dd') as d1 
					from dual
				]]>
			</if>
		</foreach>
	</select>
	
	<select id="pselectedtableselect" parameterType="map" resultType="graphdatevo">
		<foreach collection="array1" item="item">
			<if test="month.substring(5).equals(item)">
				<![CDATA[
					select rt.category, to_char(sum(a), '999,999,999,999,999') d31, to_char(sum(b), '999,999,999,999,999') d30, to_char(sum(c), '999,999,999,999,999') d29, 
					to_char(sum(d), '999,999,999,999,999') d28, to_char(sum(e), '999,999,999,999,999') d27, to_char(sum(f), '999,999,999,999,999') d26, to_char(sum(g), '999,999,999,999,999') d25, 
					to_char(sum(h), '999,999,999,999,999') d24, to_char(sum(i), '999,999,999,999,999') d23, to_char(sum(j), '999,999,999,999,999') d22, to_char(sum(k), '999,999,999,999,999') d21, 
					to_char(sum(l), '999,999,999,999,999') d20, to_char(sum(m), '999,999,999,999,999') d19, to_char(sum(n), '999,999,999,999,999') d18, to_char(sum(o), '999,999,999,999,999') d17, 
					to_char(sum(p), '999,999,999,999,999') d16, to_char(sum(q), '999,999,999,999,999') d15, to_char(sum(r), '999,999,999,999,999') d14, to_char(sum(s), '999,999,999,999,999') d13, 
					to_char(sum(t), '999,999,999,999,999') d12, to_char(sum(u), '999,999,999,999,999') d11, to_char(sum(v), '999,999,999,999,999') d10, to_char(sum(w), '999,999,999,999,999') d9, 
					to_char(sum(x), '999,999,999,999,999') d8, to_char(sum(y), '999,999,999,999,999') d7, to_char(sum(z), '999,999,999,999,999') d6, to_char(sum(a1), '999,999,999,999,999') d5, 
					to_char(sum(b1), '999,999,999,999,999') d4, to_char(sum(c1), '999,999,999,999,999') d3, to_char(sum(d1), '999,999,999,999,999') d2, to_char(sum(e1), '999,999,999,999,999') d1, 
					to_char(sum(a)+sum(b)+sum(c)+sum(d)+sum(e)+sum(f)+sum(g)+sum(h)+sum(i)+sum(j)+sum(k)+sum(l)+sum(m)+sum(n)+sum(o)+sum(p)+sum(e)+sum(q)+sum(r)+sum(s)+sum(t)+sum(u)+sum(v)+sum(w)+ 
					sum(x)+sum(y)+sum(z)+sum(a1)+sum(b1)+sum(c1)+sum(d1)+sum(e1), '999,999,999,999,999') as sumresult
					from (select category, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1/86400 then 
						 sum(money) end, 0) a, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 -1/86400 then 
						 sum(money) end, 0) b, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 -1/86400 then 
						 sum(money) end, 0) c, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 -1/86400 then 
						 sum(money) end, 0) d, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 -1/86400 then 
						 sum(money) end, 0) e, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 -1/86400 then 
						 sum(money) end, 0) f, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 -1/86400 then 
						 sum(money) end, 0) g, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 -1/86400 then 
						 sum(money) end, 0) h, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 -1/86400 then 
						 sum(money) end, 0) i, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 -1/86400 then 
						 sum(money) end, 0) j, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 -1/86400 then 
						 sum(money) end, 0) k, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 -1/86400 then 
						 sum(money) end, 0) l, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 -1/86400 then 
						 sum(money) end, 0) m, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 -1/86400 then 
						 sum(money) end, 0) n, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 -1/86400 then 
						 sum(money) end, 0) o, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 -1/86400 then 
						 sum(money) end, 0) p, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 -1/86400 then 
						 sum(money) end, 0) q, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 -1/86400 then 
						 sum(money) end, 0) r, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 -1/86400 then 
						 sum(money) end, 0) s, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 -1/86400 then 
						 sum(money) end, 0) t, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 -1/86400 then 
						 sum(money) end, 0) u, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 -1/86400 then 
						 sum(money) end, 0) v, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 -1/86400 then 
						 sum(money) end, 0) w, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 -1/86400 then 
						 sum(money) end, 0) x, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 -1/86400 then 
						 sum(money) end, 0) y, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 -1/86400 then 
						 sum(money) end, 0) z, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 -1/86400 then 
						 sum(money) end, 0) a1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 -1/86400 then 
						 sum(money) end, 0) b1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 -1/86400 then 
						 sum(money) end, 0) c1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -30 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 -1/86400 then 
						 sum(money) end, 0) d1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -31 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -30 -1/86400 then 
						 sum(money) end, 0) e1 
					from list where id = #{id} and operations = '+' group by category, day) rt group by rt.category
				]]>
			</if>
		</foreach>
		<if test="month.substring(5).equals('02')">
			<![CDATA[
				select rt.category, to_char(sum(a), '999,999,999,999,999') d28, to_char(sum(b), '999,999,999,999,999') d27, to_char(sum(c), '999,999,999,999,999') d26, 
					to_char(sum(d), '999,999,999,999,999') d25, to_char(sum(e), '999,999,999,999,999') d24, to_char(sum(f), '999,999,999,999,999') d23, to_char(sum(g), '999,999,999,999,999') d22, 
					to_char(sum(h), '999,999,999,999,999') d21, to_char(sum(i), '999,999,999,999,999') d20, to_char(sum(j), '999,999,999,999,999') d19, to_char(sum(k), '999,999,999,999,999') d18, 
					to_char(sum(l), '999,999,999,999,999') d17, to_char(sum(m), '999,999,999,999,999') d16, to_char(sum(n), '999,999,999,999,999') d15, to_char(sum(o), '999,999,999,999,999') d14, 
					to_char(sum(p), '999,999,999,999,999') d13, to_char(sum(q), '999,999,999,999,999') d12, to_char(sum(r), '999,999,999,999,999') d11, to_char(sum(s), '999,999,999,999,999') d10, 
					to_char(sum(t), '999,999,999,999,999') d9, to_char(sum(u), '999,999,999,999,999') d8, to_char(sum(v), '999,999,999,999,999') d7, to_char(sum(w), '999,999,999,999,999') d6, 
					to_char(sum(x), '999,999,999,999,999') d5, to_char(sum(y), '999,999,999,999,999') d4, to_char(sum(z), '999,999,999,999,999') d3, to_char(sum(a1), '999,999,999,999,999') d2, 
					to_char(sum(b1), '999,999,999,999,999') d1, 
					to_char(sum(a)+sum(b)+sum(c)+sum(d)+sum(e)+sum(f)+sum(g)+sum(h)+sum(i)+sum(j)+sum(k)+sum(l)+sum(m)+sum(n)+sum(o)+sum(p)+sum(e)+sum(q)+sum(r)+sum(s)+sum(t)+sum(u)+sum(v)+sum(w)+ 
					sum(x)+sum(y)+sum(z)+sum(a1)+sum(b1), '999,999,999,999,999') as sumresult
					from (select category, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1/86400 then 
						 sum(money) end, 0) a, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 -1/86400 then 
						 sum(money) end, 0) b, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 -1/86400 then 
						 sum(money) end, 0) c, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 -1/86400 then 
						 sum(money) end, 0) d, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 -1/86400 then 
						 sum(money) end, 0) e, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 -1/86400 then 
						 sum(money) end, 0) f, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 -1/86400 then 
						 sum(money) end, 0) g, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 -1/86400 then 
						 sum(money) end, 0) h, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 -1/86400 then 
						 sum(money) end, 0) i, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 -1/86400 then 
						 sum(money) end, 0) j, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 -1/86400 then 
						 sum(money) end, 0) k, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 -1/86400 then 
						 sum(money) end, 0) l, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 -1/86400 then 
						 sum(money) end, 0) m, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 -1/86400 then 
						 sum(money) end, 0) n, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 -1/86400 then 
						 sum(money) end, 0) o, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 -1/86400 then 
						 sum(money) end, 0) p, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 -1/86400 then 
						 sum(money) end, 0) q, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 -1/86400 then 
						 sum(money) end, 0) r, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 -1/86400 then 
						 sum(money) end, 0) s, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 -1/86400 then 
						 sum(money) end, 0) t, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 -1/86400 then 
						 sum(money) end, 0) u, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 -1/86400 then 
						 sum(money) end, 0) v, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 -1/86400 then 
						 sum(money) end, 0) w, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 -1/86400 then 
						 sum(money) end, 0) x, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 -1/86400 then 
						 sum(money) end, 0) y, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 -1/86400 then 
						 sum(money) end, 0) z, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 -1/86400 then 
						 sum(money) end, 0) a1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 -1/86400 then 
						 sum(money) end, 0) b1 
					from list where id = #{id} and operations = '+' group by category, day) rt group by rt.category
			]]>
		</if>
		<foreach collection="array2" item="item">
			<if test="month.substring(5).equals(item)">
				<![CDATA[
					select rt.category, to_char(sum(a), '999,999,999,999,999') d30, to_char(sum(b), '999,999,999,999,999') d29, to_char(sum(c), '999,999,999,999,999') d28, 
					to_char(sum(d), '999,999,999,999,999') d27, to_char(sum(e), '999,999,999,999,999') d26, to_char(sum(f), '999,999,999,999,999') d25, to_char(sum(g), '999,999,999,999,999') d24, 
					to_char(sum(h), '999,999,999,999,999') d23, to_char(sum(i), '999,999,999,999,999') d22, to_char(sum(j), '999,999,999,999,999') d21, to_char(sum(k), '999,999,999,999,999') d20, 
					to_char(sum(l), '999,999,999,999,999') d19, to_char(sum(m), '999,999,999,999,999') d18, to_char(sum(n), '999,999,999,999,999') d17, to_char(sum(o), '999,999,999,999,999') d16, 
					to_char(sum(p), '999,999,999,999,999') d15, to_char(sum(q), '999,999,999,999,999') d14, to_char(sum(r), '999,999,999,999,999') d13, to_char(sum(s), '999,999,999,999,999') d12, 
					to_char(sum(t), '999,999,999,999,999') d11, to_char(sum(u), '999,999,999,999,999') d10, to_char(sum(v), '999,999,999,999,999') d9, to_char(sum(w), '999,999,999,999,999') d8, 
					to_char(sum(x), '999,999,999,999,999') d7, to_char(sum(y), '999,999,999,999,999') d6, to_char(sum(z), '999,999,999,999,999') d5, to_char(sum(a1), '999,999,999,999,999') d4, 
					to_char(sum(b1), '999,999,999,999,999') d3, to_char(sum(c1), '999,999,999,999,999') d2, to_char(sum(d1), '999,999,999,999,999') d1, 
					to_char(sum(a)+sum(b)+sum(c)+sum(d)+sum(e)+sum(f)+sum(g)+sum(h)+sum(i)+sum(j)+sum(k)+sum(l)+sum(m)+sum(n)+sum(o)+sum(p)+sum(e)+sum(q)+sum(r)+sum(s)+sum(t)+sum(u)+sum(v)+sum(w)+
					sum(x)+sum(y)+sum(z)+sum(a1)+sum(b1)+sum(c1)+sum(d1), '999,999,999,999,999') as sumresult
					from (select category, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1/86400 then 
						 sum(money) end, 0) a, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 -1/86400 then 
						 sum(money) end, 0) b, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 -1/86400 then 
						 sum(money) end, 0) c, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 -1/86400 then 
						 sum(money) end, 0) d, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 -1/86400 then 
						 sum(money) end, 0) e, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 -1/86400 then 
						 sum(money) end, 0) f, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 -1/86400 then 
						 sum(money) end, 0) g, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 -1/86400 then 
						 sum(money) end, 0) h, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 -1/86400 then 
						 sum(money) end, 0) i, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 -1/86400 then 
						 sum(money) end, 0) j, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 -1/86400 then 
						 sum(money) end, 0) k, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 -1/86400 then 
						 sum(money) end, 0) l, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 -1/86400 then 
						 sum(money) end, 0) m, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 -1/86400 then 
						 sum(money) end, 0) n, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 -1/86400 then 
						 sum(money) end, 0) o, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 -1/86400 then 
						 sum(money) end, 0) p, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 -1/86400 then 
						 sum(money) end, 0) q, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 -1/86400 then 
						 sum(money) end, 0) r, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 -1/86400 then 
						 sum(money) end, 0) s, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 -1/86400 then 
						 sum(money) end, 0) t, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 -1/86400 then 
						 sum(money) end, 0) u, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 -1/86400 then 
						 sum(money) end, 0) v, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 -1/86400 then 
						 sum(money) end, 0) w, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 -1/86400 then 
						 sum(money) end, 0) x, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 -1/86400 then 
						 sum(money) end, 0) y, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 -1/86400 then 
						 sum(money) end, 0) z, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 -1/86400 then 
						 sum(money) end, 0) a1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 -1/86400 then 
						 sum(money) end, 0) b1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 -1/86400 then 
						 sum(money) end, 0) c1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -30 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 -1/86400 then 
						 sum(money) end, 0) d1
					from list where id = #{id} and operations = '+' group by category, day) rt group by rt.category
				]]>
			</if>
		</foreach>
	</select>
	
	<select id="mselectedtableselect" parameterType="map" resultType="graphdatevo">
		<foreach collection="array1" item="item">
			<if test="month.substring(5).equals(item)">
				<![CDATA[
					select rt.category, to_char(sum(a), '999,999,999,999,999') d31, to_char(sum(b), '999,999,999,999,999') d30, to_char(sum(c), '999,999,999,999,999') d29, 
					to_char(sum(d), '999,999,999,999,999') d28, to_char(sum(e), '999,999,999,999,999') d27, to_char(sum(f), '999,999,999,999,999') d26, to_char(sum(g), '999,999,999,999,999') d25, 
					to_char(sum(h), '999,999,999,999,999') d24, to_char(sum(i), '999,999,999,999,999') d23, to_char(sum(j), '999,999,999,999,999') d22, to_char(sum(k), '999,999,999,999,999') d21, 
					to_char(sum(l), '999,999,999,999,999') d20, to_char(sum(m), '999,999,999,999,999') d19, to_char(sum(n), '999,999,999,999,999') d18, to_char(sum(o), '999,999,999,999,999') d17, 
					to_char(sum(p), '999,999,999,999,999') d16, to_char(sum(q), '999,999,999,999,999') d15, to_char(sum(r), '999,999,999,999,999') d14, to_char(sum(s), '999,999,999,999,999') d13, 
					to_char(sum(t), '999,999,999,999,999') d12, to_char(sum(u), '999,999,999,999,999') d11, to_char(sum(v), '999,999,999,999,999') d10, to_char(sum(w), '999,999,999,999,999') d9, 
					to_char(sum(x), '999,999,999,999,999') d8, to_char(sum(y), '999,999,999,999,999') d7, to_char(sum(z), '999,999,999,999,999') d6, to_char(sum(a1), '999,999,999,999,999') d5, 
					to_char(sum(b1), '999,999,999,999,999') d4, to_char(sum(c1), '999,999,999,999,999') d3, to_char(sum(d1), '999,999,999,999,999') d2, to_char(sum(e1), '999,999,999,999,999') d1, 
					to_char(sum(a)+sum(b)+sum(c)+sum(d)+sum(e)+sum(f)+sum(g)+sum(h)+sum(i)+sum(j)+sum(k)+sum(l)+sum(m)+sum(n)+sum(o)+sum(p)+sum(e)+sum(q)+sum(r)+sum(s)+sum(t)+sum(u)+sum(v)+sum(w)+ 
					sum(x)+sum(y)+sum(z)+sum(a1)+sum(b1)+sum(c1)+sum(d1)+sum(e1), '999,999,999,999,999') as sumresult
					from (select category, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1/86400 then 
						 sum(money) end, 0) a, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 -1/86400 then 
						 sum(money) end, 0) b, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 -1/86400 then 
						 sum(money) end, 0) c, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 -1/86400 then 
						 sum(money) end, 0) d, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 -1/86400 then 
						 sum(money) end, 0) e, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 -1/86400 then 
						 sum(money) end, 0) f, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 -1/86400 then 
						 sum(money) end, 0) g, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 -1/86400 then 
						 sum(money) end, 0) h, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 -1/86400 then 
						 sum(money) end, 0) i, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 -1/86400 then 
						 sum(money) end, 0) j, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 -1/86400 then 
						 sum(money) end, 0) k, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 -1/86400 then 
						 sum(money) end, 0) l, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 -1/86400 then 
						 sum(money) end, 0) m, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 -1/86400 then 
						 sum(money) end, 0) n, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 -1/86400 then 
						 sum(money) end, 0) o, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 -1/86400 then 
						 sum(money) end, 0) p, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 -1/86400 then 
						 sum(money) end, 0) q, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 -1/86400 then 
						 sum(money) end, 0) r, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 -1/86400 then 
						 sum(money) end, 0) s, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 -1/86400 then 
						 sum(money) end, 0) t, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 -1/86400 then 
						 sum(money) end, 0) u, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 -1/86400 then 
						 sum(money) end, 0) v, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 -1/86400 then 
						 sum(money) end, 0) w, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 -1/86400 then 
						 sum(money) end, 0) x, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 -1/86400 then 
						 sum(money) end, 0) y, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 -1/86400 then 
						 sum(money) end, 0) z, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 -1/86400 then 
						 sum(money) end, 0) a1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 -1/86400 then 
						 sum(money) end, 0) b1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 -1/86400 then 
						 sum(money) end, 0) c1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -30 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 -1/86400 then 
						 sum(money) end, 0) d1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -31 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -30 -1/86400 then 
						 sum(money) end, 0) e1 
					from list where id = #{id} and operations = '-' group by category, day) rt group by rt.category
				]]>
			</if>
		</foreach>
		<if test="month.substring(5).equals('02')">
			<![CDATA[
				select rt.category, to_char(sum(a), '999,999,999,999,999') d28, to_char(sum(b), '999,999,999,999,999') d27, to_char(sum(c), '999,999,999,999,999') d26, 
					to_char(sum(d), '999,999,999,999,999') d25, to_char(sum(e), '999,999,999,999,999') d24, to_char(sum(f), '999,999,999,999,999') d23, to_char(sum(g), '999,999,999,999,999') d22, 
					to_char(sum(h), '999,999,999,999,999') d21, to_char(sum(i), '999,999,999,999,999') d20, to_char(sum(j), '999,999,999,999,999') d19, to_char(sum(k), '999,999,999,999,999') d18, 
					to_char(sum(l), '999,999,999,999,999') d17, to_char(sum(m), '999,999,999,999,999') d16, to_char(sum(n), '999,999,999,999,999') d15, to_char(sum(o), '999,999,999,999,999') d14, 
					to_char(sum(p), '999,999,999,999,999') d13, to_char(sum(q), '999,999,999,999,999') d12, to_char(sum(r), '999,999,999,999,999') d11, to_char(sum(s), '999,999,999,999,999') d10, 
					to_char(sum(t), '999,999,999,999,999') d9, to_char(sum(u), '999,999,999,999,999') d8, to_char(sum(v), '999,999,999,999,999') d7, to_char(sum(w), '999,999,999,999,999') d6, 
					to_char(sum(x), '999,999,999,999,999') d5, to_char(sum(y), '999,999,999,999,999') d4, to_char(sum(z), '999,999,999,999,999') d3, to_char(sum(a1), '999,999,999,999,999') d2, 
					to_char(sum(b1), '999,999,999,999,999') d1, 
					to_char(sum(a)+sum(b)+sum(c)+sum(d)+sum(e)+sum(f)+sum(g)+sum(h)+sum(i)+sum(j)+sum(k)+sum(l)+sum(m)+sum(n)+sum(o)+sum(p)+sum(e)+sum(q)+sum(r)+sum(s)+sum(t)+sum(u)+sum(v)+sum(w)+ 
					sum(x)+sum(y)+sum(z)+sum(a1)+sum(b1), '999,999,999,999,999') as sumresult
					from (select category, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1/86400 then 
						 sum(money) end, 0) a, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 -1/86400 then 
						 sum(money) end, 0) b, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 -1/86400 then 
						 sum(money) end, 0) c, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 -1/86400 then 
						 sum(money) end, 0) d, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 -1/86400 then 
						 sum(money) end, 0) e, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 -1/86400 then 
						 sum(money) end, 0) f, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 -1/86400 then 
						 sum(money) end, 0) g, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 -1/86400 then 
						 sum(money) end, 0) h, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 -1/86400 then 
						 sum(money) end, 0) i, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 -1/86400 then 
						 sum(money) end, 0) j, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 -1/86400 then 
						 sum(money) end, 0) k, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 -1/86400 then 
						 sum(money) end, 0) l, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 -1/86400 then 
						 sum(money) end, 0) m, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 -1/86400 then 
						 sum(money) end, 0) n, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 -1/86400 then 
						 sum(money) end, 0) o, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 -1/86400 then 
						 sum(money) end, 0) p, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 -1/86400 then 
						 sum(money) end, 0) q, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 -1/86400 then 
						 sum(money) end, 0) r, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 -1/86400 then 
						 sum(money) end, 0) s, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 -1/86400 then 
						 sum(money) end, 0) t, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 -1/86400 then 
						 sum(money) end, 0) u, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 -1/86400 then 
						 sum(money) end, 0) v, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 -1/86400 then 
						 sum(money) end, 0) w, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 -1/86400 then 
						 sum(money) end, 0) x, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 -1/86400 then 
						 sum(money) end, 0) y, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 -1/86400 then 
						 sum(money) end, 0) z, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 -1/86400 then 
						 sum(money) end, 0) a1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 -1/86400 then 
						 sum(money) end, 0) b1 
					from list where id = #{id} and operations = '-' group by category, day) rt group by rt.category
			]]>
		</if>
		<foreach collection="array2" item="item">
			<if test="month.substring(5).equals(item)">
				<![CDATA[
					select rt.category, to_char(sum(a), '999,999,999,999,999') d30, to_char(sum(b), '999,999,999,999,999') d29, to_char(sum(c), '999,999,999,999,999') d28, 
					to_char(sum(d), '999,999,999,999,999') d27, to_char(sum(e), '999,999,999,999,999') d26, to_char(sum(f), '999,999,999,999,999') d25, to_char(sum(g), '999,999,999,999,999') d24, 
					to_char(sum(h), '999,999,999,999,999') d23, to_char(sum(i), '999,999,999,999,999') d22, to_char(sum(j), '999,999,999,999,999') d21, to_char(sum(k), '999,999,999,999,999') d20, 
					to_char(sum(l), '999,999,999,999,999') d19, to_char(sum(m), '999,999,999,999,999') d18, to_char(sum(n), '999,999,999,999,999') d17, to_char(sum(o), '999,999,999,999,999') d16, 
					to_char(sum(p), '999,999,999,999,999') d15, to_char(sum(q), '999,999,999,999,999') d14, to_char(sum(r), '999,999,999,999,999') d13, to_char(sum(s), '999,999,999,999,999') d12, 
					to_char(sum(t), '999,999,999,999,999') d11, to_char(sum(u), '999,999,999,999,999') d10, to_char(sum(v), '999,999,999,999,999') d9, to_char(sum(w), '999,999,999,999,999') d8, 
					to_char(sum(x), '999,999,999,999,999') d7, to_char(sum(y), '999,999,999,999,999') d6, to_char(sum(z), '999,999,999,999,999') d5, to_char(sum(a1), '999,999,999,999,999') d4, 
					to_char(sum(b1), '999,999,999,999,999') d3, to_char(sum(c1), '999,999,999,999,999') d2, to_char(sum(d1), '999,999,999,999,999') d1, 
					to_char(sum(a)+sum(b)+sum(c)+sum(d)+sum(e)+sum(f)+sum(g)+sum(h)+sum(i)+sum(j)+sum(k)+sum(l)+sum(m)+sum(n)+sum(o)+sum(p)+sum(e)+sum(q)+sum(r)+sum(s)+sum(t)+sum(u)+sum(v)+sum(w)+
					sum(x)+sum(y)+sum(z)+sum(a1)+sum(b1)+sum(c1)+sum(d1), '999,999,999,999,999') as sumresult
					from (select category, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1/86400 then 
						 sum(money) end, 0) a, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 -1/86400 then 
						 sum(money) end, 0) b, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 -1/86400 then 
						 sum(money) end, 0) c, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 -1/86400 then 
						 sum(money) end, 0) d, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 -1/86400 then 
						 sum(money) end, 0) e, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 -1/86400 then 
						 sum(money) end, 0) f, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 -1/86400 then 
						 sum(money) end, 0) g, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 -1/86400 then 
						 sum(money) end, 0) h, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 -1/86400 then 
						 sum(money) end, 0) i, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 -1/86400 then 
						 sum(money) end, 0) j, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 -1/86400 then 
						 sum(money) end, 0) k, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 -1/86400 then 
						 sum(money) end, 0) l, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 -1/86400 then 
						 sum(money) end, 0) m, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 -1/86400 then 
						 sum(money) end, 0) n, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 -1/86400 then 
						 sum(money) end, 0) o, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 -1/86400 then 
						 sum(money) end, 0) p, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 -1/86400 then 
						 sum(money) end, 0) q, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 -1/86400 then 
						 sum(money) end, 0) r, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 -1/86400 then 
						 sum(money) end, 0) s, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 -1/86400 then 
						 sum(money) end, 0) t, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 -1/86400 then 
						 sum(money) end, 0) u, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 -1/86400 then 
						 sum(money) end, 0) v, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 -1/86400 then 
						 sum(money) end, 0) w, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 -1/86400 then 
						 sum(money) end, 0) x, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 -1/86400 then 
						 sum(money) end, 0) y, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 -1/86400 then 
						 sum(money) end, 0) z, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 -1/86400 then 
						 sum(money) end, 0) a1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 -1/86400 then 
						 sum(money) end, 0) b1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 -1/86400 then 
						 sum(money) end, 0) c1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -30 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 -1/86400 then 
						 sum(money) end, 0) d1
					from list where id = #{id} and operations = '-' group by category, day) rt group by rt.category
				]]>
			</if>
		</foreach>
	</select>
	
	<select id="pselectedtablesumselect" parameterType="map" resultType="graphdatevo">
		<foreach collection="array1" item="item">
			<if test="month.substring(5).equals(item)">
				<![CDATA[
					select to_char(sum(a), '999,999,999,999,999') d31, to_char(sum(b), '999,999,999,999,999') d30, to_char(sum(c), '999,999,999,999,999') d29, 
					to_char(sum(d), '999,999,999,999,999') d28, to_char(sum(e), '999,999,999,999,999') d27, to_char(sum(f), '999,999,999,999,999') d26, to_char(sum(g), '999,999,999,999,999') d25, 
					to_char(sum(h), '999,999,999,999,999') d24, to_char(sum(i), '999,999,999,999,999') d23, to_char(sum(j), '999,999,999,999,999') d22, to_char(sum(k), '999,999,999,999,999') d21, 
					to_char(sum(l), '999,999,999,999,999') d20, to_char(sum(m), '999,999,999,999,999') d19, to_char(sum(n), '999,999,999,999,999') d18, to_char(sum(o), '999,999,999,999,999') d17, 
					to_char(sum(p), '999,999,999,999,999') d16, to_char(sum(q), '999,999,999,999,999') d15, to_char(sum(r), '999,999,999,999,999') d14, to_char(sum(s), '999,999,999,999,999') d13, 
					to_char(sum(t), '999,999,999,999,999') d12, to_char(sum(u), '999,999,999,999,999') d11, to_char(sum(v), '999,999,999,999,999') d10, to_char(sum(w), '999,999,999,999,999') d9, 
					to_char(sum(x), '999,999,999,999,999') d8, to_char(sum(y), '999,999,999,999,999') d7, to_char(sum(z), '999,999,999,999,999') d6, to_char(sum(a1), '999,999,999,999,999') d5, 
					to_char(sum(b1), '999,999,999,999,999') d4, to_char(sum(c1), '999,999,999,999,999') d3, to_char(sum(d1), '999,999,999,999,999') d2, to_char(sum(e1), '999,999,999,999,999') d1, 
					to_char(sum(a)+sum(b)+sum(c)+sum(d)+sum(e)+sum(f)+sum(g)+sum(h)+sum(i)+sum(j)+sum(k)+sum(l)+sum(m)+sum(n)+sum(o)+sum(p)+sum(e)+sum(q)+sum(r)+sum(s)+sum(t)+sum(u)+sum(v)+sum(w)+ 
					sum(x)+sum(y)+sum(z)+sum(a1)+sum(b1)+sum(c1)+sum(d1)+sum(e1), '999,999,999,999,999') as sumresult
					from (select category, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1/86400 then 
						 sum(money) end, 0) a, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 -1/86400 then 
						 sum(money) end, 0) b, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 -1/86400 then 
						 sum(money) end, 0) c, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 -1/86400 then 
						 sum(money) end, 0) d, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 -1/86400 then 
						 sum(money) end, 0) e, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 -1/86400 then 
						 sum(money) end, 0) f, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 -1/86400 then 
						 sum(money) end, 0) g, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 -1/86400 then 
						 sum(money) end, 0) h, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 -1/86400 then 
						 sum(money) end, 0) i, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 -1/86400 then 
						 sum(money) end, 0) j, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 -1/86400 then 
						 sum(money) end, 0) k, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 -1/86400 then 
						 sum(money) end, 0) l, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 -1/86400 then 
						 sum(money) end, 0) m, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 -1/86400 then 
						 sum(money) end, 0) n, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 -1/86400 then 
						 sum(money) end, 0) o, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 -1/86400 then 
						 sum(money) end, 0) p, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 -1/86400 then 
						 sum(money) end, 0) q, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 -1/86400 then 
						 sum(money) end, 0) r, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 -1/86400 then 
						 sum(money) end, 0) s, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 -1/86400 then 
						 sum(money) end, 0) t, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 -1/86400 then 
						 sum(money) end, 0) u, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 -1/86400 then 
						 sum(money) end, 0) v, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 -1/86400 then 
						 sum(money) end, 0) w, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 -1/86400 then 
						 sum(money) end, 0) x, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 -1/86400 then 
						 sum(money) end, 0) y, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 -1/86400 then 
						 sum(money) end, 0) z, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 -1/86400 then 
						 sum(money) end, 0) a1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 -1/86400 then 
						 sum(money) end, 0) b1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 -1/86400 then 
						 sum(money) end, 0) c1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -30 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 -1/86400 then 
						 sum(money) end, 0) d1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -31 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -30 -1/86400 then 
						 sum(money) end, 0) e1 
					from list where id = #{id} and operations = '+' group by category, day) rt 
				]]>
			</if>
		</foreach>
		<if test="month.substring(5).equals('02')">
			<![CDATA[
				select to_char(sum(a), '999,999,999,999,999') d28, to_char(sum(b), '999,999,999,999,999') d27, to_char(sum(c), '999,999,999,999,999') d26, 
					to_char(sum(d), '999,999,999,999,999') d25, to_char(sum(e), '999,999,999,999,999') d24, to_char(sum(f), '999,999,999,999,999') d23, to_char(sum(g), '999,999,999,999,999') d22, 
					to_char(sum(h), '999,999,999,999,999') d21, to_char(sum(i), '999,999,999,999,999') d20, to_char(sum(j), '999,999,999,999,999') d19, to_char(sum(k), '999,999,999,999,999') d18, 
					to_char(sum(l), '999,999,999,999,999') d17, to_char(sum(m), '999,999,999,999,999') d16, to_char(sum(n), '999,999,999,999,999') d15, to_char(sum(o), '999,999,999,999,999') d14, 
					to_char(sum(p), '999,999,999,999,999') d13, to_char(sum(q), '999,999,999,999,999') d12, to_char(sum(r), '999,999,999,999,999') d11, to_char(sum(s), '999,999,999,999,999') d10, 
					to_char(sum(t), '999,999,999,999,999') d9, to_char(sum(u), '999,999,999,999,999') d8, to_char(sum(v), '999,999,999,999,999') d7, to_char(sum(w), '999,999,999,999,999') d6, 
					to_char(sum(x), '999,999,999,999,999') d5, to_char(sum(y), '999,999,999,999,999') d4, to_char(sum(z), '999,999,999,999,999') d3, to_char(sum(a1), '999,999,999,999,999') d2, 
					to_char(sum(b1), '999,999,999,999,999') d1, 
					to_char(sum(a)+sum(b)+sum(c)+sum(d)+sum(e)+sum(f)+sum(g)+sum(h)+sum(i)+sum(j)+sum(k)+sum(l)+sum(m)+sum(n)+sum(o)+sum(p)+sum(e)+sum(q)+sum(r)+sum(s)+sum(t)+sum(u)+sum(v)+sum(w)+ 
					sum(x)+sum(y)+sum(z)+sum(a1)+sum(b1), '999,999,999,999,999') as sumresult
					from (select category, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1/86400 then 
						 sum(money) end, 0) a, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 -1/86400 then 
						 sum(money) end, 0) b, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 -1/86400 then 
						 sum(money) end, 0) c, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 -1/86400 then 
						 sum(money) end, 0) d, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 -1/86400 then 
						 sum(money) end, 0) e, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 -1/86400 then 
						 sum(money) end, 0) f, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 -1/86400 then 
						 sum(money) end, 0) g, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 -1/86400 then 
						 sum(money) end, 0) h, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 -1/86400 then 
						 sum(money) end, 0) i, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 -1/86400 then 
						 sum(money) end, 0) j, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 -1/86400 then 
						 sum(money) end, 0) k, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 -1/86400 then 
						 sum(money) end, 0) l, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 -1/86400 then 
						 sum(money) end, 0) m, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 -1/86400 then 
						 sum(money) end, 0) n, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 -1/86400 then 
						 sum(money) end, 0) o, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 -1/86400 then 
						 sum(money) end, 0) p, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 -1/86400 then 
						 sum(money) end, 0) q, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 -1/86400 then 
						 sum(money) end, 0) r, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 -1/86400 then 
						 sum(money) end, 0) s, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 -1/86400 then 
						 sum(money) end, 0) t, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 -1/86400 then 
						 sum(money) end, 0) u, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 -1/86400 then 
						 sum(money) end, 0) v, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 -1/86400 then 
						 sum(money) end, 0) w, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 -1/86400 then 
						 sum(money) end, 0) x, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 -1/86400 then 
						 sum(money) end, 0) y, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 -1/86400 then 
						 sum(money) end, 0) z, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 -1/86400 then 
						 sum(money) end, 0) a1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 -1/86400 then 
						 sum(money) end, 0) b1 
					from list where id = #{id} and operations = '+' group by category, day) rt 
			]]>
		</if>
		<foreach collection="array2" item="item">
			<if test="month.substring(5).equals(item)">
				<![CDATA[
					select to_char(sum(a), '999,999,999,999,999') d30, to_char(sum(b), '999,999,999,999,999') d29, to_char(sum(c), '999,999,999,999,999') d28, 
					to_char(sum(d), '999,999,999,999,999') d27, to_char(sum(e), '999,999,999,999,999') d26, to_char(sum(f), '999,999,999,999,999') d25, to_char(sum(g), '999,999,999,999,999') d24, 
					to_char(sum(h), '999,999,999,999,999') d23, to_char(sum(i), '999,999,999,999,999') d22, to_char(sum(j), '999,999,999,999,999') d21, to_char(sum(k), '999,999,999,999,999') d20, 
					to_char(sum(l), '999,999,999,999,999') d19, to_char(sum(m), '999,999,999,999,999') d18, to_char(sum(n), '999,999,999,999,999') d17, to_char(sum(o), '999,999,999,999,999') d16, 
					to_char(sum(p), '999,999,999,999,999') d15, to_char(sum(q), '999,999,999,999,999') d14, to_char(sum(r), '999,999,999,999,999') d13, to_char(sum(s), '999,999,999,999,999') d12, 
					to_char(sum(t), '999,999,999,999,999') d11, to_char(sum(u), '999,999,999,999,999') d10, to_char(sum(v), '999,999,999,999,999') d9, to_char(sum(w), '999,999,999,999,999') d8, 
					to_char(sum(x), '999,999,999,999,999') d7, to_char(sum(y), '999,999,999,999,999') d6, to_char(sum(z), '999,999,999,999,999') d5, to_char(sum(a1), '999,999,999,999,999') d4, 
					to_char(sum(b1), '999,999,999,999,999') d3, to_char(sum(c1), '999,999,999,999,999') d2, to_char(sum(d1), '999,999,999,999,999') d1, 
					to_char(sum(a)+sum(b)+sum(c)+sum(d)+sum(e)+sum(f)+sum(g)+sum(h)+sum(i)+sum(j)+sum(k)+sum(l)+sum(m)+sum(n)+sum(o)+sum(p)+sum(e)+sum(q)+sum(r)+sum(s)+sum(t)+sum(u)+sum(v)+sum(w)+
					sum(x)+sum(y)+sum(z)+sum(a1)+sum(b1)+sum(c1)+sum(d1), '999,999,999,999,999') as sumresult
					from (select category, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1/86400 then 
						 sum(money) end, 0) a, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 -1/86400 then 
						 sum(money) end, 0) b, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 -1/86400 then 
						 sum(money) end, 0) c, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 -1/86400 then 
						 sum(money) end, 0) d, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 -1/86400 then 
						 sum(money) end, 0) e, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 -1/86400 then 
						 sum(money) end, 0) f, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 -1/86400 then 
						 sum(money) end, 0) g, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 -1/86400 then 
						 sum(money) end, 0) h, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 -1/86400 then 
						 sum(money) end, 0) i, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 -1/86400 then 
						 sum(money) end, 0) j, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 -1/86400 then 
						 sum(money) end, 0) k, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 -1/86400 then 
						 sum(money) end, 0) l, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 -1/86400 then 
						 sum(money) end, 0) m, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 -1/86400 then 
						 sum(money) end, 0) n, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 -1/86400 then 
						 sum(money) end, 0) o, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 -1/86400 then 
						 sum(money) end, 0) p, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 -1/86400 then 
						 sum(money) end, 0) q, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 -1/86400 then 
						 sum(money) end, 0) r, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 -1/86400 then 
						 sum(money) end, 0) s, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 -1/86400 then 
						 sum(money) end, 0) t, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 -1/86400 then 
						 sum(money) end, 0) u, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 -1/86400 then 
						 sum(money) end, 0) v, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 -1/86400 then 
						 sum(money) end, 0) w, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 -1/86400 then 
						 sum(money) end, 0) x, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 -1/86400 then 
						 sum(money) end, 0) y, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 -1/86400 then 
						 sum(money) end, 0) z, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 -1/86400 then 
						 sum(money) end, 0) a1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 -1/86400 then 
						 sum(money) end, 0) b1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 -1/86400 then 
						 sum(money) end, 0) c1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -30 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 -1/86400 then 
						 sum(money) end, 0) d1
					from list where id = #{id} and operations = '+' group by category, day) rt 
				]]>
			</if>
		</foreach>
	</select>
	
	<select id="mselectedtablesumselect" parameterType="map" resultType="graphdatevo">
		<foreach collection="array1" item="item">
			<if test="month.substring(5).equals(item)">
				<![CDATA[
					select to_char(sum(a), '999,999,999,999,999') d31, to_char(sum(b), '999,999,999,999,999') d30, to_char(sum(c), '999,999,999,999,999') d29, 
					to_char(sum(d), '999,999,999,999,999') d28, to_char(sum(e), '999,999,999,999,999') d27, to_char(sum(f), '999,999,999,999,999') d26, to_char(sum(g), '999,999,999,999,999') d25, 
					to_char(sum(h), '999,999,999,999,999') d24, to_char(sum(i), '999,999,999,999,999') d23, to_char(sum(j), '999,999,999,999,999') d22, to_char(sum(k), '999,999,999,999,999') d21, 
					to_char(sum(l), '999,999,999,999,999') d20, to_char(sum(m), '999,999,999,999,999') d19, to_char(sum(n), '999,999,999,999,999') d18, to_char(sum(o), '999,999,999,999,999') d17, 
					to_char(sum(p), '999,999,999,999,999') d16, to_char(sum(q), '999,999,999,999,999') d15, to_char(sum(r), '999,999,999,999,999') d14, to_char(sum(s), '999,999,999,999,999') d13, 
					to_char(sum(t), '999,999,999,999,999') d12, to_char(sum(u), '999,999,999,999,999') d11, to_char(sum(v), '999,999,999,999,999') d10, to_char(sum(w), '999,999,999,999,999') d9, 
					to_char(sum(x), '999,999,999,999,999') d8, to_char(sum(y), '999,999,999,999,999') d7, to_char(sum(z), '999,999,999,999,999') d6, to_char(sum(a1), '999,999,999,999,999') d5, 
					to_char(sum(b1), '999,999,999,999,999') d4, to_char(sum(c1), '999,999,999,999,999') d3, to_char(sum(d1), '999,999,999,999,999') d2, to_char(sum(e1), '999,999,999,999,999') d1, 
					to_char(sum(a)+sum(b)+sum(c)+sum(d)+sum(e)+sum(f)+sum(g)+sum(h)+sum(i)+sum(j)+sum(k)+sum(l)+sum(m)+sum(n)+sum(o)+sum(p)+sum(e)+sum(q)+sum(r)+sum(s)+sum(t)+sum(u)+sum(v)+sum(w)+ 
					sum(x)+sum(y)+sum(z)+sum(a1)+sum(b1)+sum(c1)+sum(d1)+sum(e1), '999,999,999,999,999') as sumresult
					from (select category, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1/86400 then 
						 sum(money) end, 0) a, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 -1/86400 then 
						 sum(money) end, 0) b, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 -1/86400 then 
						 sum(money) end, 0) c, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 -1/86400 then 
						 sum(money) end, 0) d, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 -1/86400 then 
						 sum(money) end, 0) e, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 -1/86400 then 
						 sum(money) end, 0) f, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 -1/86400 then 
						 sum(money) end, 0) g, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 -1/86400 then 
						 sum(money) end, 0) h, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 -1/86400 then 
						 sum(money) end, 0) i, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 -1/86400 then 
						 sum(money) end, 0) j, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 -1/86400 then 
						 sum(money) end, 0) k, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 -1/86400 then 
						 sum(money) end, 0) l, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 -1/86400 then 
						 sum(money) end, 0) m, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 -1/86400 then 
						 sum(money) end, 0) n, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 -1/86400 then 
						 sum(money) end, 0) o, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 -1/86400 then 
						 sum(money) end, 0) p, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 -1/86400 then 
						 sum(money) end, 0) q, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 -1/86400 then 
						 sum(money) end, 0) r, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 -1/86400 then 
						 sum(money) end, 0) s, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 -1/86400 then 
						 sum(money) end, 0) t, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 -1/86400 then 
						 sum(money) end, 0) u, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 -1/86400 then 
						 sum(money) end, 0) v, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 -1/86400 then 
						 sum(money) end, 0) w, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 -1/86400 then 
						 sum(money) end, 0) x, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 -1/86400 then 
						 sum(money) end, 0) y, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 -1/86400 then 
						 sum(money) end, 0) z, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 -1/86400 then 
						 sum(money) end, 0) a1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 -1/86400 then 
						 sum(money) end, 0) b1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 -1/86400 then 
						 sum(money) end, 0) c1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -30 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 -1/86400 then 
						 sum(money) end, 0) d1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -31 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -30 -1/86400 then 
						 sum(money) end, 0) e1 
					from list where id = #{id} and operations = '-' group by category, day) rt 
				]]>
			</if>
		</foreach>
		<if test="month.substring(5).equals('02')">
			<![CDATA[
				select to_char(sum(a), '999,999,999,999,999') d28, to_char(sum(b), '999,999,999,999,999') d27, to_char(sum(c), '999,999,999,999,999') d26, 
					to_char(sum(d), '999,999,999,999,999') d25, to_char(sum(e), '999,999,999,999,999') d24, to_char(sum(f), '999,999,999,999,999') d23, to_char(sum(g), '999,999,999,999,999') d22, 
					to_char(sum(h), '999,999,999,999,999') d21, to_char(sum(i), '999,999,999,999,999') d20, to_char(sum(j), '999,999,999,999,999') d19, to_char(sum(k), '999,999,999,999,999') d18, 
					to_char(sum(l), '999,999,999,999,999') d17, to_char(sum(m), '999,999,999,999,999') d16, to_char(sum(n), '999,999,999,999,999') d15, to_char(sum(o), '999,999,999,999,999') d14, 
					to_char(sum(p), '999,999,999,999,999') d13, to_char(sum(q), '999,999,999,999,999') d12, to_char(sum(r), '999,999,999,999,999') d11, to_char(sum(s), '999,999,999,999,999') d10, 
					to_char(sum(t), '999,999,999,999,999') d9, to_char(sum(u), '999,999,999,999,999') d8, to_char(sum(v), '999,999,999,999,999') d7, to_char(sum(w), '999,999,999,999,999') d6, 
					to_char(sum(x), '999,999,999,999,999') d5, to_char(sum(y), '999,999,999,999,999') d4, to_char(sum(z), '999,999,999,999,999') d3, to_char(sum(a1), '999,999,999,999,999') d2, 
					to_char(sum(b1), '999,999,999,999,999') d1, 
					to_char(sum(a)+sum(b)+sum(c)+sum(d)+sum(e)+sum(f)+sum(g)+sum(h)+sum(i)+sum(j)+sum(k)+sum(l)+sum(m)+sum(n)+sum(o)+sum(p)+sum(e)+sum(q)+sum(r)+sum(s)+sum(t)+sum(u)+sum(v)+sum(w)+ 
					sum(x)+sum(y)+sum(z)+sum(a1)+sum(b1), '999,999,999,999,999') as sumresult
					from (select category, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1/86400 then 
						 sum(money) end, 0) a, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 -1/86400 then 
						 sum(money) end, 0) b, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 -1/86400 then 
						 sum(money) end, 0) c, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 -1/86400 then 
						 sum(money) end, 0) d, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 -1/86400 then 
						 sum(money) end, 0) e, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 -1/86400 then 
						 sum(money) end, 0) f, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 -1/86400 then 
						 sum(money) end, 0) g, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 -1/86400 then 
						 sum(money) end, 0) h, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 -1/86400 then 
						 sum(money) end, 0) i, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 -1/86400 then 
						 sum(money) end, 0) j, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 -1/86400 then 
						 sum(money) end, 0) k, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 -1/86400 then 
						 sum(money) end, 0) l, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 -1/86400 then 
						 sum(money) end, 0) m, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 -1/86400 then 
						 sum(money) end, 0) n, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 -1/86400 then 
						 sum(money) end, 0) o, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 -1/86400 then 
						 sum(money) end, 0) p, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 -1/86400 then 
						 sum(money) end, 0) q, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 -1/86400 then 
						 sum(money) end, 0) r, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 -1/86400 then 
						 sum(money) end, 0) s, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 -1/86400 then 
						 sum(money) end, 0) t, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 -1/86400 then 
						 sum(money) end, 0) u, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 -1/86400 then 
						 sum(money) end, 0) v, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 -1/86400 then 
						 sum(money) end, 0) w, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 -1/86400 then 
						 sum(money) end, 0) x, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 -1/86400 then 
						 sum(money) end, 0) y, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 -1/86400 then 
						 sum(money) end, 0) z, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 -1/86400 then 
						 sum(money) end, 0) a1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 -1/86400 then 
						 sum(money) end, 0) b1 
					from list where id = #{id} and operations = '-' group by category, day) rt 
			]]>
		</if>
		<foreach collection="array2" item="item">
			<if test="month.substring(5).equals(item)">
				<![CDATA[
					select to_char(sum(a), '999,999,999,999,999') d30, to_char(sum(b), '999,999,999,999,999') d29, to_char(sum(c), '999,999,999,999,999') d28, 
					to_char(sum(d), '999,999,999,999,999') d27, to_char(sum(e), '999,999,999,999,999') d26, to_char(sum(f), '999,999,999,999,999') d25, to_char(sum(g), '999,999,999,999,999') d24, 
					to_char(sum(h), '999,999,999,999,999') d23, to_char(sum(i), '999,999,999,999,999') d22, to_char(sum(j), '999,999,999,999,999') d21, to_char(sum(k), '999,999,999,999,999') d20, 
					to_char(sum(l), '999,999,999,999,999') d19, to_char(sum(m), '999,999,999,999,999') d18, to_char(sum(n), '999,999,999,999,999') d17, to_char(sum(o), '999,999,999,999,999') d16, 
					to_char(sum(p), '999,999,999,999,999') d15, to_char(sum(q), '999,999,999,999,999') d14, to_char(sum(r), '999,999,999,999,999') d13, to_char(sum(s), '999,999,999,999,999') d12, 
					to_char(sum(t), '999,999,999,999,999') d11, to_char(sum(u), '999,999,999,999,999') d10, to_char(sum(v), '999,999,999,999,999') d9, to_char(sum(w), '999,999,999,999,999') d8, 
					to_char(sum(x), '999,999,999,999,999') d7, to_char(sum(y), '999,999,999,999,999') d6, to_char(sum(z), '999,999,999,999,999') d5, to_char(sum(a1), '999,999,999,999,999') d4, 
					to_char(sum(b1), '999,999,999,999,999') d3, to_char(sum(c1), '999,999,999,999,999') d2, to_char(sum(d1), '999,999,999,999,999') d1, 
					to_char(sum(a)+sum(b)+sum(c)+sum(d)+sum(e)+sum(f)+sum(g)+sum(h)+sum(i)+sum(j)+sum(k)+sum(l)+sum(m)+sum(n)+sum(o)+sum(p)+sum(e)+sum(q)+sum(r)+sum(s)+sum(t)+sum(u)+sum(v)+sum(w)+
					sum(x)+sum(y)+sum(z)+sum(a1)+sum(b1)+sum(c1)+sum(d1), '999,999,999,999,999') as sumresult
					from (select category, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1/86400 then 
						 sum(money) end, 0) a, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -1 -1/86400 then 
						 sum(money) end, 0) b, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -2 -1/86400 then 
						 sum(money) end, 0) c, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -3 -1/86400 then 
						 sum(money) end, 0) d, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -4 -1/86400 then 
						 sum(money) end, 0) e, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -5 -1/86400 then 
						 sum(money) end, 0) f, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -6 -1/86400 then 
						 sum(money) end, 0) g, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -7 -1/86400 then 
						 sum(money) end, 0) h, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -8 -1/86400 then 
						 sum(money) end, 0) i, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -9 -1/86400 then 
						 sum(money) end, 0) j, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -10 -1/86400 then 
						 sum(money) end, 0) k, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -11 -1/86400 then 
						 sum(money) end, 0) l, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -12 -1/86400 then 
						 sum(money) end, 0) m, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -13 -1/86400 then 
						 sum(money) end, 0) n, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -14 -1/86400 then 
						 sum(money) end, 0) o, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -15 -1/86400 then 
						 sum(money) end, 0) p, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -16 -1/86400 then 
						 sum(money) end, 0) q, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -17 -1/86400 then 
						 sum(money) end, 0) r, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -18 -1/86400 then 
						 sum(money) end, 0) s, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -19 -1/86400 then 
						 sum(money) end, 0) t, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -20 -1/86400 then 
						 sum(money) end, 0) u, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -21 -1/86400 then 
						 sum(money) end, 0) v, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -22 -1/86400 then 
						 sum(money) end, 0) w, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -23 -1/86400 then 
						 sum(money) end, 0) x, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -24 -1/86400 then 
						 sum(money) end, 0) y, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -25 -1/86400 then 
						 sum(money) end, 0) z, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -26 -1/86400 then 
						 sum(money) end, 0) a1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -27 -1/86400 then 
						 sum(money) end, 0) b1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -28 -1/86400 then 
						 sum(money) end, 0) c1, 
						 nvl(case when day between add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -30 and add_months(to_date(concat(#{month}, '/01'), 'yyyy/mm/dd'), 1) -29 -1/86400 then 
						 sum(money) end, 0) d1
					from list where id = #{id} and operations = '-' group by category, day) rt 
				]]>
			</if>
		</foreach>
	</select>
	
	<select id="pselectmonth" parameterType="map" resultType="graphvo">
		<![CDATA[
			select sum(money) as lsum, category, day as day1 from list where id = #{id} and operations = '+' and day between to_date(concat(#{selectmonth}, '/01'), 'yyyy/mm/dd') and 
			add_months(to_date(concat(#{selectmonth}, '/01'), 'yyyy/mm/dd'), 1) - 1 / 86400 group by category, day order by day
		]]>
	</select>
	
	<select id="mselectmonth" parameterType="map" resultType="graphvo">
		<![CDATA[
			select sum(money) as lsum, category, day as day1 from list where id = #{id} and operations = '-' and day between to_date(concat(#{selectmonth}, '/01'), 'yyyy/mm/dd') and 
			add_months(to_date(concat(#{selectmonth}, '/01'), 'yyyy/mm/dd'), 1) - 1 / 86400 group by category, day order by day
		]]>
	</select>
	
	<select id="graphjinanmonthselect" resultType="graphvo">
		<![CDATA[
			select rownum, cnt, category from (select sum(cnt) as cnt, category from 
			(select count(*) as cnt, c.category from list, category c where list.category = c.category and c.slave_id = 0 and 
			list.day between trunc(add_months(sysdate, -1), 'mm') and trunc(add_months(sysdate, 0), 'mm') -1/86400 and operations = '-'
			group by c.category union all
			select count(*) as cnt, c2.category from list, category c1, category c2 where list.category = c1.category and c1.slave_id = c2.category_id and 
			list.day between trunc(add_months(sysdate, -1), 'mm') and trunc(add_months(sysdate, 0), 'mm') -1/86400 and operations = '-'
			group by c2.category) group by category order by cnt desc, category) where rownum < 11
		]]>
	</select>
	
	<select id="graphttmonthselect" resultType="graphvo">
		<![CDATA[
			select rownum, cnt, category from (select sum(cnt) as cnt, category from 
			(select count(*) as cnt, c.category from list, category c where list.category = c.category and c.slave_id = 0 and 
			list.day between trunc(add_months(sysdate, 0), 'mm') and trunc(add_months(sysdate, 1), 'mm') -1/86400 and operations = '-'
			group by c.category union all
			select count(*) as cnt, c2.category from list, category c1, category c2 where list.category = c1.category and c1.slave_id = c2.category_id and 
			list.day between trunc(add_months(sysdate, 0), 'mm') and trunc(add_months(sysdate, 1), 'mm') -1/86400 and operations = '-'
			group by c2.category) group by category order by cnt desc, category) where rownum < 11
		]]>
	</select>
	
	<select id="allexportgraphselect" resultType="graphvo">
		<![CDATA[
			select * from (select avg(list.money) as lsum, c.category, list.day as day1 from list, category c where list.category = c.category and c.slave_id = 0 and operations = '-' 
			and list.day between trunc(add_months(sysdate, -12), 'mm') and trunc(sysdate, 'dd') group by c.category, list.day union all
			select avg(money) as lsum, c2.category, list.day as day1 from list, category c1, category c2 where list.category = c1.category and c1.slave_id = c2.category_id and 
			operations = '-' and list.day between trunc(add_months(sysdate, -12), 'mm') and trunc(sysdate, 'dd') group by c2.category, list.day) order by day1, lsum desc
		]]>
	</select>
	
	<select id="alllimitgraphselect" resultType="graphvo">
		<![CDATA[
			select rownum, category, ml, lsum from (select category, sum(ml) as ml, sum(lsum) as lsum from 
			(select a.category, a.ml, b.lsum from (select category, avg(money_limit) as ml from category c, userscategory uc where c.category_id = uc.category_id and slave_id = 0 
			group by category) a,
			(select category, floor(avg(money)) as lsum from list where day between trunc(add_months(sysdate, -1), 'mm') and trunc(add_months(sysdate, 0), 'mm') -1/86400 and operations = '-'
			group by category) b where a.category = b.category union all 
			select a.category, a.ml, b.lsum from (select c1.category as cate, c2.category, avg(money_limit) as ml from category c1, category c2, userscategory uc 
			where c1.category_id = uc.category_id and c1.slave_id = c2.category_id group by c1.category, c2.category) a,
			(select category, floor(avg(money)) as lsum from list where day between trunc(add_months(sysdate, -1), 'mm') and trunc(add_months(sysdate, 0), 'mm') -1/86400 and operations = '-'
			group by category) b where a.cate = b.category) group by category order by lsum desc, category) where rownum < 11
		]]>
	</select>
	
	<!-- select sum(cnt) as cnt, category from (select count(*) as cnt, c.category as category from (select id from (select gender, age from users where id = #{value}) a, 
			users where users.gender = a.gender and users.age = a.age) b, list, category c where b.id = list.id and list.operations = '-' and list.category = c.category and c.slave_id = 0 
			and list.day between trunc(sysdate, 'yy') and trunc(add_months(sysdate, 12), 'yy')-1/86400 group by c.category union all
			select count(*) as cnt, c2.category as category from (select id from (select gender, age from users where id = #{value}) a, 
			users where users.gender = a.gender and users.age = a.age) b, list, category c1, category c2 where b.id = list.id and list.operations = '-' and list.category = c1.category 
			and c1.slave_id = c2.category_id and list.day between trunc(sysdate, 'yy') and trunc(add_months(sysdate, 12), 'yy')-1/86400 group by c2.category) 
			group by category order by cnt desc -->
	
	<select id="graphjinanmonthselect1" parameterType="map" resultType="graphvo">
		<![CDATA[
			select rownum, cnt, category from (select sum(cnt) as cnt, category from 
			(select count(*) as cnt, c.category from 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			list, category c where list.category = c.category and operations = '-' and c.slave_id = 0 and 
			list.day between trunc(add_months(sysdate, -1), 'mm') and trunc(add_months(sysdate, 0), 'mm') -1/86400 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id and profit.id = list.id 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					and profit.id = list.id 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			group by c.category union all
			select count(*) as cnt, c2.category from 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			list, category c1, category c2 where list.category = c1.category and c1.slave_id = c2.category_id and operations = '-' and 
			list.day between trunc(add_months(sysdate, -1), 'mm') and trunc(add_months(sysdate, 0), 'mm') -1/86400 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id and profit.id = list.id 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					and profit.id = list.id 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			group by c2.category) 
			group by category order by cnt desc, category) where rownum < 11
		]]>
	</select>
	
	<select id="graphttmonthselect1" parameterType="map" resultType="graphvo">
		<![CDATA[
			select rownum, cnt, category from (select sum(cnt) as cnt, category from 
			(select count(*) as cnt, c.category from 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			list, category c where list.category = c.category and operations = '-' and c.slave_id = 0 and 
			list.day between trunc(add_months(sysdate, 0), 'mm') and trunc(add_months(sysdate, 1), 'mm') -1/86400 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id and profit.id = list.id 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					and profit.id = list.id 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			group by c.category union all
			select count(*) as cnt, c2.category from 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			list, category c1, category c2 where list.category = c1.category and c1.slave_id = c2.category_id and operations = '-' and 
			list.day between trunc(add_months(sysdate, 0), 'mm') and trunc(add_months(sysdate, 1), 'mm') -1/86400 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id and profit.id = list.id 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					and profit.id = list.id 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			group by c2.category) 
			group by category order by cnt desc, category) where rownum < 11
		]]>
	</select>
	
	<select id="allexportgraphselect1" parameterType="map" resultType="graphvo">
		<![CDATA[
			select * from 
			(select avg(list.money) as lsum, c.category, list.day as day1 from 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			list, category c where list.category = c.category and c.slave_id = 0 and operations = '-' and list.day between trunc(add_months(sysdate, -12), 'mm') and trunc(sysdate, 'dd') 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id and profit.id = list.id 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					and profit.id = list.id 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			group by c.category, list.day union all 
			select avg(money) as lsum, c2.category, list.day as day1 from 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			list, category c1, category c2 where list.category = c1.category and c1.slave_id = c2.category_id and operations = '-' 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id and profit.id = list.id 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					and profit.id = list.id 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			and list.day between trunc(add_months(sysdate, -12), 'mm') and trunc(sysdate, 'dd') group by c2.category, list.day) 
			order by day1, lsum desc
		]]>
	</select>
	
	<select id="alllimitgraphselect1" parameterType="map" resultType="graphvo">
		<![CDATA[
			select rownum, category, ml, lsum from (select category, sum(ml) as ml, sum(lsum) as lsum from 
			(select a.category, a.ml, b.lsum from (select category, avg(money_limit) as ml from category c, userscategory uc where c.category_id = uc.category_id and slave_id = 0 
			group by category) a, (select category, floor(avg(money)) as lsum from 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			list where day between trunc(add_months(sysdate, -1), 'mm') and trunc(add_months(sysdate, 0), 'mm') -1/86400 and operations = '-' 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id and profit.id = list.id 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					and profit.id = list.id 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			group by category) b where a.category = b.category union all 
			select a.category, a.ml, b.lsum from (select c1.category as cate, c2.category, avg(money_limit) as ml from category c1, category c2, userscategory uc 
			where c1.category_id = uc.category_id and c1.slave_id = c2.category_id group by c1.category, c2.category) a,
			(select category, floor(avg(money)) as lsum from 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender} and age between 20 and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender != '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where gender = #{gender}) a, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
					(select id from (select id, nvl((case when sum(money) between #{profitbegin}*10000 and #{profitend}*10000 then sum(money) end), 0) as summon from list 
					where operations = '+' group by id) where summon != 0) profit, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and #{age1}) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age != '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between #{age} and 48) a, 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 != '끝 나이(전체)'">
				<![CDATA[
					(select id from users where age between 20 and #{age1}) a, 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			list where day between trunc(add_months(sysdate, -1), 'mm') and trunc(add_months(sysdate, 0), 'mm') -1/86400 and operations = '-' 
		]]>
		<choose>
			<when test="profit != '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id and profit.id = list.id 
				]]>
			</when>
			<when test="profit == '월 수입(전체)' and (gender != '성별(전체)' or age != '시작 나이(전체)' or age1 != '끝 나이(전체)')">
				<![CDATA[
					and a.id = list.id 
				]]>
			</when>
			<when test="profit != '월 수입(전체)' and gender == '성별(전체)' and age == '시작 나이(전체)' and age1 == '끝 나이(전체)'">
				<![CDATA[
					and profit.id = list.id 
				]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<![CDATA[
			group by category) b where a.cate = b.category) 
			group by category order by lsum desc, category) where rownum < 11
		]]>
	</select>
</mapper>